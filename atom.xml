<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Acptek&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://acptek.github.io/"/>
  <updated>2019-09-22T12:50:09.824Z</updated>
  <id>https://acptek.github.io/</id>
  
  <author>
    <name>acptek</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>VSLAM-4.2 李代数求导</title>
    <link href="https://acptek.github.io/2019/09/22/VSLAM-4-2-%E6%9D%8E%E4%BB%A3%E6%95%B0%E6%B1%82%E5%AF%BC/"/>
    <id>https://acptek.github.io/2019/09/22/VSLAM-4-2-李代数求导/</id>
    <published>2019-09-22T12:49:43.000Z</published>
    <updated>2019-09-22T12:50:09.824Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>1） SLAM的过程就是不断的估计相机的位姿和建立地图，在此过程中会出现一定的误差，所以目的是寻找一个最佳位姿（通过优化方法，一般采用迭代优化方法，每次迭代都更新一个位姿的增量delta，使得目标函数最小。这个delta就是通过误差函数对T微分得到的。也就是说我们需要对变换矩阵T求微分），使得整体误差最小。</p><p>为此，可以列出关于变换矩阵T的目标函数，要求解方程需要对变换矩阵求导。</p><p>2） 就旋转矩阵而言，其矩阵加法不封闭，为此不满足导数定义中“加一个极小量”。所以，要使得矩阵满足求导运算，引出李群和李代数。</p><p>李群是具有连续性质的群，群上定义了某种矩阵的集合。对于旋转矩阵、变换矩阵都是满足李群的定义，例如旋转矩阵在旋转矩阵的集合中关于乘法运算满足李群。李群运算不满足求导，但与李群对应的李代数满足加法后保持性质。至此，将变换矩阵求导的问题转化为了求李代数的导数问题。</p><p>在讨论李代数的物理意义时，so(3)就代表了旋转向量组成的空间。实际上，so(3)是三维向量phi的集合，每个向量phi^表达了这个李代数对应的李群SO(3)上旋转矩阵R的导数。其中，R与phi是一个指数映射关系。</p><p>关于李代数和李群在几何意义上的关系：李代数对应李群的正切空间，描述了李群的局部导数。</p></blockquote><h2 id="李代数求导"><span class="heading-link">李代数求导</span></h2><h3 id="BCH公式"><span class="heading-link">BCH公式</span></h3><script type="math/tex; mode=display">\ln(\exp(A)\exp(B))=A+B+\frac{1}{2}[A,B]+\frac{1}{12}[A,[A,B]]-\frac{1}{12}[B[A,B]]+...</script><p>其中“[ , ]”为李括号。</p><p>考虑SO(3)上的李代数：</p><script type="math/tex; mode=display">\ln(\exp(\phi_1^\wedge)\exp(\phi_2^\wedge))^\vee=\left\{\begin{matrix}{J_l(\phi_2)}^{-1}\phi_1+\phi_2\;\;当\phi_1为小量\\ {J_r(\phi_1)}^{-1}\phi_2+\phi_1\;\;当\phi_2为小量\end{matrix}\right.\tag{*}</script><p>第一个近似描述了：对一个旋转矩阵$R2$（李代数$\phi_2$），左乘一个微小旋转$R_1$，近似看作：在李代数$\phi_2$上加了一项${J_l(\phi_2)}^{-1}\phi_1$.</p><script type="math/tex; mode=display">J_l=J=\frac{\sin\theta}{\theta}I+(1-\frac{\sin\theta}{\theta})\alpha\alpha^T+\frac{1-\cos\theta}{\theta}\alpha^\wedge\tag{**}</script><script type="math/tex; mode=display">J^{-1}=\frac{\theta}{2}\cot\frac{\theta}{2}I+(1-\frac{\theta}{2}\cot\frac{\theta}{2})\alpha\alpha^T-\frac{\theta}{2}\alpha^\wedge\tag{**}</script><p>右乘：$J_r(\phi)=J_l(-\phi)$</p><p>至此，得到李群乘法和李代数加法的关系</p><h3 id="BCH近似"><span class="heading-link">BCH近似</span></h3><p>$旋转矩阵R，其李代数\phi，微小旋转\Delta R，其李代数\Delta\phi$，李群乘法$\rightarrow$李代数加法</p><script type="math/tex; mode=display">\exp(\Delta\phi^\wedge)\exp(\phi^\wedge)=\exp((\phi+J_l^{-1}(\phi)\Delta\phi)^\wedge)\tag{***}</script><p>李代数加法$\rightarrow$李群乘法</p><script type="math/tex; mode=display">\exp((\phi+\Delta\phi)^\wedge)=\exp((J_l\Delta\phi)^\wedge)\exp(\phi^\wedge)=\exp(\phi^\wedge)\exp((J_r\Delta\phi)^\wedge)\tag{***}</script><h3 id="李代数求导-1"><span class="heading-link">李代数求导</span></h3><p>两种思路：</p><p>1 导数模型 ， 2 扰动模型</p><h4 id="SO-3-上的李代数求导"><span class="heading-link">SO(3)上的李代数求导</span></h4><p>$位姿T，观察点的世界坐标p，产生的观测数据z，随即噪声w$，对于N个观测误差$e=z-Tp$，（寻找一个最优T，使误差最小）</p><script type="math/tex; mode=display">\underset{T}{\min}J(T)=\sum_{i=1}^N||z_i-Tp_i||_2^2</script><h4 id="李代数求导-2"><span class="heading-link">李代数求导</span></h4><p>1）按照导数模型，（根据李代数的加法结合导数的定义来求旋转后点的坐标对于旋转的导数，或者说是求旋转很小时偏移的变化率），可以求得：</p><script type="math/tex; mode=display">\begin{align}& \frac{\partial (\exp(\phi^\wedge)p)}{\partial \phi}\approx-(Rp)^\wedge J_l\\&\\\Rightarrow &\frac{\partial (Rp)}{\partial \phi}=(-Rp)^\wedge J_l\tag{旋转后的点对于李代数的导数}\end{align}</script><p>2）扰动模型，对旋转矩阵R进行一次扰动$\Delta R$（对应的李代数为$\varphi $），看结果相对于扰动的变化率。</p><script type="math/tex; mode=display">\frac{\partial (Rp)}{\partial \phi}=(-Rp)^\wedge</script><h4 id="SE-3-上的李代数求导"><span class="heading-link">SE(3)上的李代数求导</span></h4><p>空间点p，变换T（对应的李代数为$\xi$），扰动变换$\Delta T=\exp(\delta\xi^\wedge)$，其李代数为$\delta\xi=[\delta\rho,\delta\phi]^T$：</p><script type="math/tex; mode=display">\frac{\partial (Tp)}{\partial \delta\xi}=\begin{bmatrix}I & -(Rp+t)^\wedge\\ 0^T & 0^T\end{bmatrix}git</script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;1） SLAM的过程就是不断的估计相机的位姿和建立地图，在此过程中会出现一定的误差，所以目的是寻找一个最佳位姿（通过优化方法，一般采用迭代优化方法，每次迭代都更新一个位姿的增量delta，使得目标函数最小。这个delta就是通过误差函数对T微分得到
      
    
    </summary>
    
      <category term="SLAM" scheme="https://acptek.github.io/categories/SLAM/"/>
    
    
      <category term="SLAM" scheme="https://acptek.github.io/tags/SLAM/"/>
    
      <category term="Math" scheme="https://acptek.github.io/tags/Math/"/>
    
  </entry>
  
  <entry>
    <title>VSLAM-4.1 李群李代数及其转换的映射</title>
    <link href="https://acptek.github.io/2019/09/21/VSLAM-4-1-%E6%9D%8E%E7%BE%A4%E6%9D%8E%E4%BB%A3%E6%95%B0%E5%8F%8A%E5%85%B6%E8%BD%AC%E6%8D%A2%E7%9A%84%E6%98%A0%E5%B0%84/"/>
    <id>https://acptek.github.io/2019/09/21/VSLAM-4-1-李群李代数及其转换的映射/</id>
    <published>2019-09-21T13:01:32.000Z</published>
    <updated>2019-09-21T13:14:17.052Z</updated>
    
    <content type="html"><![CDATA[<h2 id="李群与李代数"><span class="heading-link">李群与李代数</span></h2><h3 id="（1）群"><span class="heading-link">（1）群</span></h3><p>代数结构：一种集合+集合上的一种运算</p><p>满足性质：封闭性、结合率、幺元、逆</p><p>李群：具有连续（光滑）性质的群</p><h3 id="（2）李代数"><span class="heading-link">（2）李代数</span></h3><p>与李群对应的一种数据结构</p><h4 id="引出李代数"><span class="heading-link">引出李代数</span></h4><p>旋转矩阵$R$是某个相机的旋转，并随时间连续地变化</p><script type="math/tex; mode=display">\begin{align}& R(t)R(t)^T=I\tag{两边对t求导} \\\Rightarrow\;& \dot{R}(t)R(t)^T+R(t)\dot{R}(t)^T=0\\\Rightarrow\;& \dot{R}(t)R(t)^T = -(\dot{R}(t)R(t)^T)^T\\&\\\rightarrow\;&\dot{R}(t)R(t)^T是一个反对称矩阵\end{align}</script><p>所以，找到一个三维向量$\phi(t)\in\mathbb{R^3}$记：</p><script type="math/tex; mode=display">\begin{align}& \phi(t)\text{^}=\dot{R}(t)R(t)^T \tag{1}\\&\\\Rightarrow\;&\dot{R}(t)=\phi(t)\text{^}R(t)\tag{2}\end{align}</script><p>考虑：$t_0=0时，R(0)=I$，在0处泰勒展开：</p><script type="math/tex; mode=display">R(t)\approx R(t_0)+\dot{R}(t_0)(t-t_0)=I+\phi(t_0)\text{^}t</script><p>在$t_0$附近，$\phi(t_0)=\phi_0$为常数，所以得到关于R的微分方程，得：</p><script type="math/tex; mode=display">R(t)=e^{\phi\text{^}t} \tag{3}</script><h4 id="李代数的定义"><span class="heading-link">李代数的定义</span></h4><p>每个李群对应一个李代数。李代数描述了李群的局部性质，是单位元附近的正切空间（tangent Space切线空间，是一种三维空间）</p><p>集合$\mathbb{V}$ + 数域$\mathbb{F}$ + 二元运算（李括号）[ , ] = 李代数</p><script type="math/tex; mode=display">\mathfrak{g}=(\mathbb{V},\mathbb{F},[,])</script><p>性质：封闭性、双线性、自反性（与自身运算结果为零）、雅可比等价</p><h4 id="李代数-mathfrak-so-3"><span class="heading-link">李代数$\mathfrak{so}(3)$</span></h4><p>定义$\Phi=\phi^\wedge$，得 李括号为：</p><script type="math/tex; mode=display">[\phi_1,\phi_2]=(\Phi_1\Phi_2-\Phi_2\Phi_1)^\vee</script><script type="math/tex; mode=display">\mathfrak{so}(3)=\begin{Bmatrix}\phi=\mathbb{R^3},\Phi=\phi^\wedge\in\mathbb{R^{3\times3} }\end{Bmatrix}\tag{*}</script><p>所以，so(3)是一个由三维向量组成的集合，每个向量对应一个反对称矩阵，表达旋转矩阵的导数</p><p>对应SO(3)，$ R(t)=e^{\phi\text{^}t}  $</p><script type="math/tex; mode=display">SO(3)=\{R\in\mathbb{R}^{3\times 3}|RR^T=I,det(R)=1\}\tag{*}</script><h4 id="李代数-mathfrak-se-3"><span class="heading-link">李代数$\mathfrak{se}(3)$</span></h4><script type="math/tex; mode=display">\mathfrak{se}(3)=\begin{Bmatrix}\xi =\begin{bmatrix}\rho \\ \phi \end{bmatrix}\in\mathbb{R}^6,\rho\in\mathbb{R}^3,\phi\in\mathfrak{so}(3),\xi^\wedge =\begin{bmatrix}\phi^\wedge & \rho\\ 0^T & 0\end{bmatrix}\in\mathbb{R}^{4\times4}\end{Bmatrix}</script><p>$\mathfrak{se}(3) $：由一个平移+一个$\mathfrak{so}(3)$构成的向量</p><p>$\mathfrak{se}(3)$对应的李括号：</p><script type="math/tex; mode=display">[\xi_1,\xi_2]=(\xi_1^\wedge\xi_2^\wedge-\xi_2^\wedge\xi_1^\wedge)^\vee</script><h2 id="指数与对数映射"><span class="heading-link">指数与对数映射</span></h2><h3 id="（1）SO-3-上的指数映射"><span class="heading-link">（1）SO(3)上的指数映射</span></h3><p>1 指数映射：在李群李代数中，一个矩阵的指数</p><p>2 通过泰勒展开，得$\mathfrak{so}(3)中的任意元素\phi的指数映射$：</p><script type="math/tex; mode=display">\text{exp}(\phi^\wedge)=\sum_{n=0}^\infty \frac{1}{n!}(\phi^\wedge)^n</script><p>3 关于上述定义的计算：</p><p>定义$\phi$的 模长$\theta$，方向$\alpha$，$\phi=\theta\alpha$，其中$||a||=1$</p><p>关于$\alpha$的性质：$\alpha^\wedge\alpha^\wedge=\alpha\alpha^T-I$，$\alpha^\wedge\alpha^\wedge\alpha^\wedge=-\alpha^\wedge$，将$\theta\alpha$代入指数映射：</p><script type="math/tex; mode=display">\begin{align}\text{exp}(\phi^\wedge)&=\text{exp}(\theta^\wedge\alpha)\\&=\cos{\theta I}+(1-\cos\theta)\alpha\alpha^T+\sin\theta\alpha^\wedge\end{align}</script><p>【注】</p><script type="math/tex; mode=display">罗德里格斯公式：R=cos\theta I+(1-cos\theta )nn^T+sin\theta n\text{^}</script><p><strong>由此表明，$\mathfrak{so}(3)$实际上就是旋转向量组成的空间（李代数$\rightarrow$李群）其物理意义就是旋转向量，指数映射就是罗德里格斯公式（旋转向量$\rightarrow$旋转矩阵）</strong>（旋转矩阵的导数可以由旋转向量指定）</p><p>所以</p><script type="math/tex; mode=display">\Rightarrow\;\phi =ln(R)^\vee=(\sum_{n=0}^\infty\frac{(-1)^n}{n+1}(R-I)^{n+1})^\vee</script><p>但是，可以通过求解转角和转轴，可以更加简便的得到 $\theta$ 和 $\alpha$  </p><script type="math/tex; mode=display"> \theta=arccos\frac{tr(R)-1}{2},Rn=n</script><p>综上所述，得到李群SO(3)和李代数so(3)的对应关系，将旋转角控制在$（-\pi,\pi）$之间，二者成一一对应关系</p><h3 id="（2）SE-3-上的指数映射"><span class="heading-link">（2）SE(3)上的指数映射</span></h3><script type="math/tex; mode=display">\text{exp}(\xi^\wedge)=\begin{bmatrix}\sum_{n=0}^\infty \frac{1}{n!}(\phi^\wedge)^n & \sum_{n=0}^\infty \frac{1}{()n+1)!}(\phi^\wedge)^n\rho\\ 0^T & 1\end{bmatrix} \overset{\Delta}{=}\begin{bmatrix}R & J\rho\\ 0^T & 1\end{bmatrix}=T</script><p>经求解，得：$J=\frac{\sin\theta}{\theta}I+(1-\frac{\sin\theta}{\theta})\alpha\alpha^T+\frac{1-\cos\theta}{\theta}\alpha^\wedge$（雅可比矩阵）</p><p>SE(3)右上角的平移向量t，结合$t=J\rho$，$J可由\phi求得$，可以求得 $\rho$</p><p>由此，确定SE(3)和se(3)的转换关系</p><hr><p><img src="\images\LGA.png" alt="李群李代数转换关系"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;李群与李代数&quot;&gt;&lt;span class=&quot;heading-link&quot;&gt;李群与李代数&lt;/span&gt;&lt;/h2&gt;&lt;h3 id=&quot;（1）群&quot;&gt;&lt;span class=&quot;heading-link&quot;&gt;（1）群&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;代数结构：一种集合+集合上的一种运算&lt;
      
    
    </summary>
    
      <category term="SLAM" scheme="https://acptek.github.io/categories/SLAM/"/>
    
    
      <category term="SLAM" scheme="https://acptek.github.io/tags/SLAM/"/>
    
      <category term="Math" scheme="https://acptek.github.io/tags/Math/"/>
    
  </entry>
  
  <entry>
    <title>VSALM-3.2 旋转向量 欧拉角 四元数</title>
    <link href="https://acptek.github.io/2019/09/17/VSALM-3-2-%E6%97%8B%E8%BD%AC%E5%90%91%E9%87%8F-%E6%AC%A7%E6%8B%89%E8%A7%92-%E5%9B%9B%E5%85%83%E6%95%B0/"/>
    <id>https://acptek.github.io/2019/09/17/VSALM-3-2-旋转向量-欧拉角-四元数/</id>
    <published>2019-09-17T07:34:00.000Z</published>
    <updated>2019-09-21T13:02:14.781Z</updated>
    
    <content type="html"><![CDATA[<h2 id="旋转向量"><span class="heading-link">旋转向量</span></h2><h3 id="表现形式"><span class="heading-link">表现形式</span></h3><p><strong>旋转向量/轴角</strong>：用一个旋转轴和一人个旋转角来刻画任意一个旋转，<strong>方向和旋转轴一致，长度等于旋转角</strong></p><p>所以，对于变换矩阵T，可以使用一个旋转向量和一个平移变量来表示，总共6个变量</p><h3 id="旋转向量转化为旋转矩阵"><span class="heading-link">旋转向量转化为旋转矩阵</span></h3><p><strong>罗德里格斯公式</strong>：</p><p>​        长度为$\theta$，轴角为$n$（单位长度的向量），用向量$\theta n$表示旋转。</p><script type="math/tex; mode=display">R=cos\theta I+(1-cos\theta )nn^T+sin\theta n\text{^}</script><p>​        根据 迹 的性质，对该公式两边取迹，求得转角和旋转矩阵的关系。</p><script type="math/tex; mode=display">\Rightarrow \theta=arccos\frac{tr(R)-1}{2}</script><h3 id="转轴"><span class="heading-link">转轴</span></h3><p>转轴$n$上的旋转向量在旋转后不发生改变，</p><script type="math/tex; mode=display">Rn=n \;\Leftarrow\left\{\begin{matrix}Rn=\lambda n\\ \lambda = 1\end{matrix}\right.</script><p>所以，可以推导出$n$为旋转矩阵$R$特征值为1对应的特征向量。因此，已知旋转矩阵，即可求得旋转轴。</p><h2 id="欧拉角"><span class="heading-link">欧拉角</span></h2><p>将三个轴的旋转方向作定义，更加直观的表示旋转的过程。</p><p>但是在使用欧拉角时，会出现“万向锁问题”，例如可能导致三个轴的旋转实际只表示了两次旋转等情况。</p><h2 id="四元数"><span class="heading-link">四元数</span></h2><h3 id="定义"><span class="heading-link">定义</span></h3><script type="math/tex; mode=display">\begin{align}& q=[s,v]^T,\;s=q_0  \in \mathbb{R},\;v=[q_1, q_2, q_3]^T \in \mathbb{R} . \\&q = q_0+q_1i+q_2j+q_3k .\\& s为实部，v为虚部\end{align}</script><h3 id="运算"><span class="heading-link">运算</span></h3><p>1）自身三个虚部满足的乘法运算关系</p><p>2）两四元数加减法</p><p>3）两四元数的乘法</p><script type="math/tex; mode=display">\begin{align}& q_a\: [s_a, v_a]^T,\;q_a=s_a+x_ai+y_aj+z_ak\\& q_b\:[s_b,v_b]^T,q_b=s_b+x_bi+y_bj+z_bk\\\rightarrow\\&q_aq_b=[s_as_b-v_a^Tv_b, s_av_b+s_bv_a+v_a\times v_b]^T\end{align}</script><p>4）模长 $||q||$</p><p>5）共轭 $q^*$</p><script type="math/tex; mode=display">q^*q=qq^*=[s_a^2+v^Tv, 0]^T.</script><p>6）逆 $q^{-1}$ </p><script type="math/tex; mode=display">\begin{align}&q^{-1}=q^*/||q||^2\\&q^{-1}q=qq^{-1}=1\end{align}</script><p>7）数乘</p><h3 id="用四元数表示旋转"><span class="heading-link">用四元数表示旋转</span></h3><p>在二维平面中，旋转数可以写为 $q=cos\theta+i*sin\theta$</p><p>引申到三维旋转中，四元数向量表示为 $q\;[cos\theta, v*sin\theta]$</p><h4 id="三维空间点的旋转"><span class="heading-link">三维空间点的旋转</span></h4><p>空间三维点：$p=[x,y,z]\in \mathbb{R^3}$</p><p>单位四元数：$q$ ,用于指定旋转</p><p>1）将三维空间点用虚四元数表示：</p><script type="math/tex; mode=display">p=[0, x,y,z]^T=[0,v]^T</script><p>2）旋转</p><script type="math/tex; mode=display">p'=extend(R)p \Rightarrow p'=qpq^{-1}</script><p>通过先乘q再作q逆乘法，相当与先用右手坐标系将空间点旋转二分之一的旋转角，再用左手坐标系逆向旋转二分之一旋转角，以此使得最终得到的四元数时纯虚四元数，从而直接表示三维空间坐标。（从几何意义上是将三维向量转化为四维后再回到三维）</p><h3 id="四元数到其他旋转表示的转换"><span class="heading-link">四元数到其他旋转表示的转换</span></h3><p>定义：（将四元数的乘法写成矩阵乘法）</p><script type="math/tex; mode=display">q^+=\begin{bmatrix}s & -v^T\\ v & sI+v\text{^}\end{bmatrix},q^\oplus=\begin{bmatrix}s & -v^T\\ v & sI-v\text{^}\end{bmatrix}</script><script type="math/tex; mode=display">\Rightarrow q_1q_2=q_1^+q_2=q_2^\oplus q_1</script><script type="math/tex; mode=display">\Rightarrow p'=qpq^{-1}=q^+p^+q^{-1}=q^+{q^{-1}}^\oplus p</script><p>即$q^+{q^{-1}}^\oplus=extend(R)$，所以</p><h4 id="四元数转换到旋转矩阵"><span class="heading-link">四元数转换到旋转矩阵</span></h4><script type="math/tex; mode=display">q^+{q^{-1}}^\oplus=\begin{bmatrix}s & -v^T\\ v & sI+v\text{^}\end{bmatrix}\begin{bmatrix}s & v^T\\ -v & sI+v\text{^}\end{bmatrix}=\begin{bmatrix}1 & 0\\ 0^T & vv^T+s^2I+2sv\text{^}+(v\text{^})^2\end{bmatrix}</script><script type="math/tex; mode=display">\Rightarrow R=vv^T+s^2I+2sv\text{^}+(v\text{^})^2  \tag{*}</script><h4 id="四元数转换到旋转向量"><span class="heading-link">四元数转换到旋转向量</span></h4><p>对两边取迹，得：</p><script type="math/tex; mode=display">tr(R)=4s^2-1</script><p>其中，关于 $v(v_1,v_2,v_3)$，$v\text{^}$是向量$v$的反对称矩阵形式</p><script type="math/tex; mode=display">tr((v\text{^})^2)=2(v_1^2+v_2^2+v_3^2) \tag{1}</script><p>又由罗德里斯公式中：</p><script type="math/tex; mode=display">\Rightarrow \theta=arccos\frac{tr(R)-1}{2}\tag{2}</script><p>最终得到四元数与旋转向量的转换关系</p><script type="math/tex; mode=display">\Rightarrow \theta=2\arccos{s}</script><p>综上，四元数到旋转向量的转换公式：</p><script type="math/tex; mode=display">\left\{\begin{matrix}\theta=2\arccos{q_0}\\ [n_x,n_y,n_z]^T=[q_1,q_2,q_3]^T/\sin{\frac{\theta}{2}}\end{matrix}\right. \tag{*}</script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;旋转向量&quot;&gt;&lt;span class=&quot;heading-link&quot;&gt;旋转向量&lt;/span&gt;&lt;/h2&gt;&lt;h3 id=&quot;表现形式&quot;&gt;&lt;span class=&quot;heading-link&quot;&gt;表现形式&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;旋转向量/轴角&lt;/strong
      
    
    </summary>
    
      <category term="SLAM" scheme="https://acptek.github.io/categories/SLAM/"/>
    
    
      <category term="SLAM" scheme="https://acptek.github.io/tags/SLAM/"/>
    
      <category term="Math" scheme="https://acptek.github.io/tags/Math/"/>
    
  </entry>
  
  <entry>
    <title>VSLAM-3.1 旋转矩阵</title>
    <link href="https://acptek.github.io/2019/09/12/VSLAM-3-1%20%E6%97%8B%E8%BD%AC%E7%9F%A9%E9%98%B5/"/>
    <id>https://acptek.github.io/2019/09/12/VSLAM-3-1 旋转矩阵/</id>
    <published>2019-09-12T08:54:13.000Z</published>
    <updated>2019-09-16T04:37:02.294Z</updated>
    
    <content type="html"><![CDATA[<h2 id="旋转矩阵"><span class="heading-link">旋转矩阵</span></h2><h3 id="点，向量，坐标系"><span class="heading-link">点，向量，坐标系</span></h3><h4 id="mathbb-R-3"><span class="heading-link">$\mathbb{R}^3$</span></h4><p>$\mathbb{R}^3$描述三维空间中的某个坐标点，$(e_1, e_2, e_3)$：为空间中的一组基</p><script type="math/tex; mode=display">\begin{align}向量&\textbf{a}在基(e_1,e_2,e_3)下的坐标：\\& \textbf{a} = [e_1,e_2,e_3]\begin{bmatrix}a_1\\ a_2\\ a_3\end{bmatrix}=a_1e_1+a_2e_2+a_3e_3.\\&(a_1,a_2,a_3)^T为\textbf{a}在基下的坐标\end{align}</script><h4 id="外积"><span class="heading-link">外积</span></h4><p>将叉乘转化为矩阵和向量相乘的线性运算</p><script type="math/tex; mode=display">\begin{align}a\times b& = \begin{Vmatrix}e_1 & e_2 & e_3\\ a_1 & a_2 & a_3\\ b_1 & b_2 & b_3\end{Vmatrix}=(a_2b_3-a_3b_2)e_1+(a_3b_1-a_1b_3)e_2+(a_1b_2-b_2a_1)e_3\\&=e\begin{bmatrix}a_2b_3-a_3b_2\\ a_3b_1-a_1b_3\\ a_1b_2-b_2a_1\end{bmatrix}\\&=\begin{bmatrix}0 & -a_3 & a_2\\ a_3 & 0 & -a_1\\ -a_2 & a_1 & 0\end{bmatrix}\begin{bmatrix}b_1\\ b_2\\ b_3\end{bmatrix}\overset{\text{def}}{=}\textbf{a^b}\end{align}</script><p><strong>符号 ^ ：反对称符号 $\Rightarrow$ a^ ：是反对称矩阵</strong>，将一个向量变成矩阵形式</p><p>a = $\begin{bmatrix}<br>0 &amp; -a_3 &amp; a_2\<br>a_3 &amp; 0 &amp; -a_1\<br>-a_2 &amp; a_1 &amp; 0<br>\end{bmatrix}$ ，任意向量对应唯一一个反对称矩阵.</p><h3 id="欧式变换"><span class="heading-link">欧式变换</span></h3><p>刚体运动：一个旋转+一个平移（坐标系变换</p><h4 id="旋转"><span class="heading-link">旋转</span></h4><p>向量本身不变但是坐标系变动，向量a在由基e转变为基e’后，再基e’中表示为a’</p><script type="math/tex; mode=display">\begin{align}&[e_1,e_2,e_3]\begin{bmatrix}a_1\\ a_2\\ a_3\end{bmatrix}=[{e}'_1,{e}'_2,{e}'_3]\begin{bmatrix}{a}'_1\\ {a}'_2\\ {a}'_3\end{bmatrix}\\&等式两边同时左乘[e_1^T,e_2^T,e_3^T]^T，设\:R\:为旋转矩阵：\\&\begin{bmatrix}a_1\\ a_2\\ a_3\end{bmatrix}=\begin{bmatrix}e^T_1{e}'_1 & e^T_1{e}'_2 & e^T_1{e}'_3\\ e^T_2{e}'_1 & e^T_2{e}'_2 & e^T_2{e}'_3\\ e^T_3{e}'_1 & e^T_3{e}'_2 & e^T_3{e}'_3\end{bmatrix}\begin{bmatrix}{a}'_1\\ {a}'_2\\ {a}'_3\end{bmatrix}\overset{\text{def}}{=}R{a}'\end{align}</script><p>旋转矩阵 R（方向余弦矩阵）行列式为1，行列式为1的正交矩阵也是一个旋转矩阵。因为行列式为1的正交矩阵的几何意义为旋转但不改变向量长度。</p><p>由此，定义n维旋转矩阵：</p><script type="math/tex; mode=display">\begin{align}\textbf{特殊正交群}:\\&SO(n)=\{R\in\mathbb{R}^{n\times n}|RR^T=I,det(R)=1\}.\end{align}</script><p>其中，I为单位矩阵</p><p>关于${a}’=R^{-1}a=R^Ta$ ，同样地，正交矩阵R的逆矩阵在几何上表示一个相反的旋转，因此R的转置刻画了一个相反的旋转。</p><h4 id="旋转-平移"><span class="heading-link">旋转 + 平移</span></h4><p>刚体运动（由向量a变换到向量a’），旋转Ra和平移向量t</p><script type="math/tex; mode=display">\textbf{a'=Ra+t}</script><h3 id="变换矩阵"><span class="heading-link">变换矩阵</span></h3><p>1）前置问题：</p><p>假设进行多次欧式变换，表达式之间的关系并非是线性关系（带有多项式项），所以为方便描述，<strong>设置变换矩阵（T矩阵）</strong></p><p>2）定义形式</p><p>将三维坐标写成齐次坐标：</p><script type="math/tex; mode=display">\begin{align}&\begin{bmatrix}{a}'\\ 1\end{bmatrix}=\begin{bmatrix}R & t\\ 0^T & 1\end{bmatrix}\begin{bmatrix}a\\ 1\end{bmatrix}\overset{\text{def}}{=}T\begin{bmatrix}a\\ 1\end{bmatrix}\\&\\&矩阵\:T\:为变换矩阵\end{align}</script><p>由此，多次变换可以写为如下形式：</p><script type="math/tex; mode=display">c=T_1T_2a</script><p>3）特殊欧式群</p><script type="math/tex; mode=display">SE(3)=\begin{Bmatrix}T=\begin{bmatrix}R & t\\ 0^T & 1\end{bmatrix}\in\mathbb{R}^{4\times4}|R \in SO(3),t\in\mathbb{R}^{3}\end{Bmatrix}</script><p>反向变换：</p><script type="math/tex; mode=display">T^{-1}=\begin{bmatrix}R^T & -R^Tt\\ 0^T & 1\end{bmatrix}</script><p>（可由$A^*=A|A|$求得）</p><h3 id="注"><span class="heading-link">[ 注 ]</span></h3><p>1）SO(3) 的旋转矩阵有9个量，但一次旋转只有3个自由度：</p><p>​            矩阵由九个元素，却只表示了 x，y，z 三个坐标的位置变化（只有三个自由度）</p><p>2）变换矩阵T用16个量（4阶T矩阵16个元素）表达了6自由度的变换，分别是三个坐标轴以及每个坐标轴的旋转变量（3个）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;旋转矩阵&quot;&gt;&lt;span class=&quot;heading-link&quot;&gt;旋转矩阵&lt;/span&gt;&lt;/h2&gt;&lt;h3 id=&quot;点，向量，坐标系&quot;&gt;&lt;span class=&quot;heading-link&quot;&gt;点，向量，坐标系&lt;/span&gt;&lt;/h3&gt;&lt;h4 id=&quot;mathbb-R-3
      
    
    </summary>
    
      <category term="SLAM" scheme="https://acptek.github.io/categories/SLAM/"/>
    
    
      <category term="SLAM" scheme="https://acptek.github.io/tags/SLAM/"/>
    
      <category term="Math" scheme="https://acptek.github.io/tags/Math/"/>
    
  </entry>
  
  <entry>
    <title>CMake 学习笔记</title>
    <link href="https://acptek.github.io/2019/09/10/CMake-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://acptek.github.io/2019/09/10/CMake-学习笔记/</id>
    <published>2019-09-10T10:58:44.000Z</published>
    <updated>2019-09-20T14:10:28.690Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>摘自 <span class="external-link"><a href="https://blog.csdn.net/whahu1989/article/details/82078563" target="_blank" rel="noopener">https://blog.csdn.net/whahu1989/article/details/82078563</a><i class="fa fa-external-link"></i></span></p></blockquote><h2 id="基本使用"><span class="heading-link">基本使用</span></h2><p>1）初始文件：hello.c，CMakeList.txt</p><p>2）CMakeList.txt</p><figure class="highlight cmake"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># CMake最低版本要求</span></span><br><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">2.8</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 工程名</span></span><br><span class="line"><span class="keyword">project</span>(HelloProject)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 最终要生成的elf文件名为hello，源文件为：hello.c</span></span><br><span class="line"><span class="keyword">add_executable</span>(hello hello.c)</span><br></pre></td></tr></table></div></figure><p>3）cmake编译</p><figure class="highlight cmake"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cmake .</span><br></pre></td></tr></table></div></figure><p>得到：CMakeFiles文件夹，CMakeCache.txt，cmake_install.cmake，Makefile</p><figure class="highlight makefile"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make</span><br></pre></td></tr></table></div></figure><p>得到目标文件 hello</p><h2 id="同目录多源文件编译"><span class="heading-link">同目录多源文件编译</span></h2><p>添加文件 test.c ，test.h ，test.h中的方法是对test.c中的函数方法的声明，hello.c引入test.h头文件，并调用头文件中的方法。</p><p>则，调整 CMakeList.txt 文件：</p><figure class="highlight cmake"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在参数表中增加testFunc.c</span></span><br><span class="line"><span class="keyword">add_executable</span>(hello hello.c testFunc.c)</span><br></pre></td></tr></table></div></figure><p>当需要编译的文件很多时，使用命令 <code>aux_source_directory(&lt; dir &gt; &lt; variable &gt;)</code> 将指定目录下所有源文件存储到一个变量中进行操作，可以避免大量手动罗列</p><figure class="highlight cmake"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将当前所在目录下的所有源文件 . ，添加到 变量SRC_LIST中</span></span><br><span class="line"><span class="keyword">aux_source_directory</span>(. SRC_LIST)</span><br><span class="line"><span class="comment"># 调用变量SRC_LIST，语法类似Makefile</span></span><br><span class="line"><span class="keyword">add_executable</span>(hello <span class="variable">$&#123;SRC_LIST&#125;</span>)</span><br></pre></td></tr></table></div></figure><h2 id="不同目录多源文件编译"><span class="heading-link">不同目录多源文件编译</span></h2><p>要编译的文件在不同目录下时，使用命令 <code>include_directories([AFTER|BEFORE] [SYSTEM] dir1 [dir2 ...])</code> 向工程添加多个指定头文件的搜索路径</p><figure class="highlight cmake"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将头文件包含进工程</span></span><br><span class="line"><span class="comment"># 等价于包含头文件 include "xx.h"</span></span><br><span class="line"><span class="keyword">include_directories</span> (test_func test_func1)</span><br><span class="line"><span class="comment"># 添加源文件到变量中</span></span><br><span class="line"><span class="keyword">aux_source_directory</span> (test_func SRC_LIST)</span><br><span class="line"><span class="keyword">aux_source_directory</span> (test_func1 SRC_LIST1)</span><br><span class="line"><span class="comment"># 添加构成执行文件的所有文件</span></span><br><span class="line"><span class="keyword">add_executable</span> (hello hello.c <span class="variable">$&#123;SRC_LIST&#125;</span> <span class="variable">$&#123;SRC_LIST1&#125;</span>)</span><br></pre></td></tr></table></div></figure><h2 id="工程目录编译"><span class="heading-link">工程目录编译</span></h2><p>include目录中是所有的.h头文件，src目录中是所有的.c源文件，build文件夹时编译文件夹</p><p>使用命令 <code>add_subdirectory(source_dir [binary_dir] [EXCLUDE_FROM_ALL])</code> 来增加一个子目录进行编译，该文件夹下的CMakeLists.txt 负责编译该文件夹下的源码。source_dir选项指定了CMakeLists.txt源文件和代码文件的位置，binary_dir选项指定了输出文件的路径</p><figure class="highlight cmake"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在build目录下增加src子目录进行编译，src中的CMakeLists.txt编译src中的源文件</span></span><br><span class="line"><span class="keyword">add_subdirectory</span> (src)</span><br></pre></td></tr></table></div></figure><p>在src目录下CMakeLists.txt中：</p><figure class="highlight cmake"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">aux_source_directory</span> (. SRC_LIST)</span><br><span class="line"><span class="keyword">include_directories</span> (../<span class="keyword">include</span>)</span><br><span class="line"><span class="keyword">add_executable</span> (hello <span class="variable">$&#123;SRC_LIST&#125;</span>)</span><br><span class="line"><span class="comment"># 位置变量 EXECUTABLE_OUTPUT_PATH 设置为 PROJECT_SOURCE_DIR/bin（工程根目录下的bin目录） </span></span><br><span class="line"><span class="keyword">set</span> (EXECUTABLE_OUTPUT_PATH <span class="variable">$&#123;PROJECT_SOURCE_DIR&#125;</span>/bin)</span><br></pre></td></tr></table></div></figure><p>在build目录下 cmake</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;摘自 &lt;span class=&quot;external-link&quot;&gt;&lt;a href=&quot;https://blog.csdn.net/whahu1989/article/details/82078563&quot; target=&quot;_blank&quot; rel=&quot;noope
      
    
    </summary>
    
    
      <category term="CMake" scheme="https://acptek.github.io/tags/CMake/"/>
    
  </entry>
  
  <entry>
    <title>VSLAM-2 SLAM概览</title>
    <link href="https://acptek.github.io/2019/09/10/VSLAM-2%20SLAM%E6%A6%82%E8%A7%88/"/>
    <id>https://acptek.github.io/2019/09/10/VSLAM-2 SLAM概览/</id>
    <published>2019-09-10T06:35:11.000Z</published>
    <updated>2019-09-16T05:08:40.684Z</updated>
    
    <content type="html"><![CDATA[<p>尺度（Scale）：单目SLAM估计的轨迹和地图相比真实的相差一个因子</p><p>基线（Baseline）：组成双目相机的两个单目相机之间的已知距离</p><p>视觉SLAM流程：</p><p>​    1）传感器信息读取</p><p>​    2）前段视觉里程计：估算相邻图像间相机的运动，以及局部地图的样子</p><p>​    3）后端（非线性）优化：优化前段输出和回环检测信息</p><p>​    4）回环检测</p><p>​    5）建图</p><p>视觉里程计：</p><p>度量地图（稀疏地图，稠密地图</p><p>拓扑地图（连通性</p><p>SLAM问题的数学表达：</p><p>​    1）运动：k-1 =&gt; k时刻，位置x 的变化：</p><p>​            运动方程：</p><script type="math/tex; mode=display">\begin{align}& x_k=f(x_{k-1},u_k,w_k)\\& u_k:运动传感器的读数或者输入\\& w_k:该运动过程中加入的噪声\\& f\:抽象指代运动过程方式\end{align}</script><p>​    2）观测：在k时刻，在 x<em>k 处探测到某一个路标 y_j ，产生观测数据z</em>{k,j}</p><p>​            观测方程：</p><script type="math/tex; mode=display">\begin{align}& z_{k,j}=h(y_i,x_k,v_{k,j})\\& v_{k,j}:这次观测的噪声\\&观测数据z和观测方程h与运动方程中的x和f一样，有许多种不同的形式\end{align}</script><p>运动方程的解释举例：</p><script type="math/tex; mode=display">\begin{align}&x_k=\begin{bmatrix}x_1\\ x_2\\ \theta\end{bmatrix}_k\rightarrow x_k：位姿；x_1,x_2:运动机器人两个轴上的位置；\theta为转角\\&\\&u_k=\begin{bmatrix}\Delta x_1\\ \Delta x_2\\ \Delta\theta\end{bmatrix}_k\rightarrow u_k:输入指令；\Delta x_1,\Delta x_2:两个时间间隔位置变化量；\Delta\theta为转角变化量\\&\\&\Rightarrow\begin{bmatrix}x_1\\ x_2\\ \theta\end{bmatrix}_k=\begin{bmatrix}x_1\\ x_2\\ \theta\end{bmatrix}_{k-1}+\begin{bmatrix}\Delta x_1\\ \Delta x_2\\ \Delta\theta\end{bmatrix}_k+w_k\end{align}</script><p>观测方程的解释举例：</p><script type="math/tex; mode=display">\begin{align}& 机器人携带的二维激光传感器，观测一个2D路标点，可得：\\&r\rightarrow路标点和机器人本体间的距离\\&\phi\rightarrow路标点和机器人本体间的夹角\\&路标点：y_j=\begin{bmatrix}y_1\\ y_2\end{bmatrix}_j,位姿：x_k=\begin{bmatrix}x_1\\ x_2\end{bmatrix}_k,观测数据：z_{k,j}=\begin{bmatrix}r_{k,j}\\ \phi_{k,j}\end{bmatrix},\\&\\&观测方程\Rightarrow\begin{bmatrix}r_{k,j}\\ \phi_{k,j}\end{bmatrix}=\begin{bmatrix}\sqrt{(y_{1,j}-x_{1,j})^2+(y_{2,j}-x_{2,j})^2}\\ arctan(\frac{y_{2,j}-x_{2,k}}{y_{1,j}-x_{1,k}})\end{bmatrix}+v\end{align}</script><p>所以SLAM过程总结为两个基本方程：</p><script type="math/tex; mode=display">\begin{align}&\left\{\begin{matrix}x_k=f(x_{k-1},u_k,w_k),\;k=1,...,K\\ z_{k,j}=h(y_i,x_k,v_{k,j}),\;(k,j)\in O\end{matrix}\right.\\&已知运动测量读数u，传感器读数z，求解定位问题（估计x）和建图问题（估计y）\\&\Rightarrow建模为一个\textbf{状态估计问题}:如何通过带有噪声的测量数据，估计内部的隐藏着的状态变量？\end{align}</script><p>『声波、温度……』</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;尺度（Scale）：单目SLAM估计的轨迹和地图相比真实的相差一个因子&lt;/p&gt;
&lt;p&gt;基线（Baseline）：组成双目相机的两个单目相机之间的已知距离&lt;/p&gt;
&lt;p&gt;视觉SLAM流程：&lt;/p&gt;
&lt;p&gt;​    1）传感器信息读取&lt;/p&gt;
&lt;p&gt;​    2）前段视觉里程计
      
    
    </summary>
    
      <category term="SLAM" scheme="https://acptek.github.io/categories/SLAM/"/>
    
    
      <category term="SLAM" scheme="https://acptek.github.io/tags/SLAM/"/>
    
      <category term="Math" scheme="https://acptek.github.io/tags/Math/"/>
    
  </entry>
  
  <entry>
    <title>Makefile 学习笔记</title>
    <link href="https://acptek.github.io/2019/09/08/Makefile-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://acptek.github.io/2019/09/08/Makefile-学习笔记/</id>
    <published>2019-09-08T03:17:10.000Z</published>
    <updated>2019-09-08T03:23:29.320Z</updated>
    
    <content type="html"><![CDATA[<h2 id="格式"><span class="heading-link">格式</span></h2><blockquote><p>表明输出的目标，输出目标的依赖对象和生成目标需要执行的命令</p></blockquote><p>目标 ： 前提依赖</p><p>『TAB』执行命令</p><h2 id="组成"><span class="heading-link">组成</span></h2><ol><li><p>显式规则</p></li><li><p>隐式规则</p><p>​    make推导出的规则</p></li><li><p>变量定义</p></li><li><p>文件指示</p></li><li><p>注释</p></li></ol><h2 id="执行"><span class="heading-link">执行</span></h2><p>读取makefile文件</p><p>读入关联文件</p><p>初始化变量</p><p>递归式执行（执行依赖链上的目标</p><h2 id="显式规则"><span class="heading-link">显式规则</span></h2><h3 id="依赖关系"><span class="heading-link">依赖关系</span></h3><p>发生依赖关系，执行命令</p><h3 id="伪目标"><span class="heading-link">伪目标</span></h3><p>使用<code>.PHONY</code>来标识，可以避免和工作目录下的实际文件名发生冲突</p><figure class="highlight makefile"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.PHONY</span><br><span class="line"><span class="section">clean:</span></span><br><span class="line">rm -f *.c</span><br></pre></td></tr></table></div></figure><h2 id="隐含规则"><span class="heading-link">隐含规则</span></h2><p>通配符</p><figure class="highlight makefile"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">%.o : %.c</span><br><span class="line"><span class="variable">$(CC)</span>  -c %.c -o %.o</span><br></pre></td></tr></table></div></figure><h3 id="文件目录"><span class="heading-link">文件目录</span></h3><p>在链接不同目录下的文件时，需要告知make寻找路径：</p><h4 id="使用VPATYH变量"><span class="heading-link">使用VPATYH变量</span></h4><figure class="highlight makefile"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># make依次按序搜索文件</span></span><br><span class="line">VPATH = /src : ../inc <span class="comment">#不同目录中间用冒号分隔</span></span><br></pre></td></tr></table></div></figure><h4 id="使用vpath关键字"><span class="heading-link">使用vpath关键字</span></h4><figure class="highlight makefile"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用 % 来指定特定文件</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1 寻找指定目录下的特定文件</span></span><br><span class="line"><span class="keyword">vpath</span> %.c dir1 <span class="comment"># 寻找dir1下的.c文件</span></span><br><span class="line"><span class="comment"># 2 清除符合特定文件的搜索目录</span></span><br><span class="line">vapth %.c</span><br><span class="line"><span class="comment"># 3 清除所有（由vpath命令）已被设置好的文件搜索目录</span></span><br><span class="line"><span class="keyword">vpath</span></span><br></pre></td></tr></table></div></figure><h2 id="变量"><span class="heading-link">变量</span></h2><h3 id="变量声明与使用"><span class="heading-link">变量声明与使用</span></h3><p>在变量声明时，需要对变量进行赋值；在使用时需要使用$(VARNAME)的形式</p><figure class="highlight makefile"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var = a.c b.c</span><br><span class="line">target : <span class="variable">$(var)</span></span><br><span class="line"><span class="comment"># command</span></span><br></pre></td></tr></table></div></figure><h3 id="变量中的变量"><span class="heading-link">变量中的变量</span></h3><ol><li>= 替换</li><li>:= 恒等与（常量），按序声明</li><li>?= 定义未定义过的变量</li><li>+= 给一个变量追加一个值</li></ol><h3 id="自动化变量"><span class="heading-link">自动化变量</span></h3><ol><li>$@ 目标文件</li><li>$&lt; 第一个依赖文件</li><li>$%</li><li>$?</li><li>$^ 所有的依赖文件</li><li>$+</li><li>$*</li></ol><h2 id="文件指示"><span class="heading-link">文件指示</span></h2><h2 id="函数"><span class="heading-link">函数</span></h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;格式&quot;&gt;&lt;span class=&quot;heading-link&quot;&gt;格式&lt;/span&gt;&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;表明输出的目标，输出目标的依赖对象和生成目标需要执行的命令&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;目标 ： 前提依赖&lt;/p&gt;
&lt;p&gt;『TA
      
    
    </summary>
    
      <category term="Linux" scheme="https://acptek.github.io/categories/Linux/"/>
    
    
      <category term="Makefile" scheme="https://acptek.github.io/tags/Makefile/"/>
    
      <category term="Linux" scheme="https://acptek.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>VSLAM-1 初识SALM</title>
    <link href="https://acptek.github.io/2019/09/07/VSLAM-1%20%E5%88%9D%E8%AF%86SLAM/"/>
    <id>https://acptek.github.io/2019/09/07/VSLAM-1 初识SLAM/</id>
    <published>2019-09-07T04:37:05.000Z</published>
    <updated>2019-09-15T07:06:14.262Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-Ax-b"><span class="heading-link">[1] Ax = b</span></h2><p>1）矩阵相乘关系</p><script type="math/tex; mode=display">m*n·n*s = m*s</script><p>2）讨论齐次方程组『Ax = 0』的解</p><script type="math/tex; mode=display">\begin{align}定义：& \eta_1,\eta_2,...\eta_t是方程 Ax = 0 的解，如果\\（1）& \eta_1,\eta_2,...\eta_t线性无关；\\（2）&方程 Ax = 0 的任一解都可由\eta_1,\eta_2,...\eta_t线性表示，\\那么&\eta_1,\eta_2,...\eta_t叫做方程Ax=0的一个基础解系。\end{align}</script><script type="math/tex; mode=display">\Rightarrow可得通解：x = k_1\eta_1+k_2\eta_2+...k_t\eta_t</script><p>​        </p><p>​        非其次方程有解的充要条件是 系数矩阵（A）与增广矩阵（在A的右侧加一列b）的秩r相等。当r=A的未知数个数n，方程组有一解，当r&lt;n时，有无穷多解</p><p>3）非其次方程组的解的结构</p><p>​        Ax=b若有解，则解x为他的一个解与导出组(Ax=0)解之和</p><p>即</p><script type="math/tex; mode=display">x = k_1\xi_1+k_2\xi_2+...k_{n-r}\xi_{n-r}+\eta^*</script><p>4）所以要求Ax=b的解，首先A和b要满足系数矩阵和增广矩阵的秩要相等（有解条件），再通过初等变换（高斯消元）来求解其次方程的解，再求得非其次的一个特解（代入基）</p><h2 id="2-高斯分布"><span class="heading-link">[2] 高斯分布</span></h2><script type="math/tex; mode=display">\frac{1}{ \sqrt{2\pi}\sigma}{e}^{-\frac{(x-\mu)^2 }{2\sigma^2} }</script><p>μ为均值，σ为方差</p><p>1 当μ=0，σ=1时，为标准高斯分布</p><p>2 当μ改变，σ不变时，分布图像平移</p><p>3 当μ不变，σ改变时，分布图像随σ增大而变扁</p><p>μ决定对称轴，σ决定扩散程度</p><blockquote><p><span class="external-link"><a href="https://www.cnblogs.com/lvchaoshun/p/7115460.html" target="_blank" rel="noopener">https://www.cnblogs.com/lvchaoshun/p/7115460.html</a><i class="fa fa-external-link"></i></span></p></blockquote><p>​        1）最大似然估计</p><p>​                似然函数：关于统计模型参数的函数，给定模型参数的情况下观测值出现的概率。定义为条件概率：</p><script type="math/tex; mode=display">p(\{x_i\}|\mu,\sigma)</script><p>​                最大似然估计是利用已知的样本结果，在使用某个模型的基础上，反推有可能导致这样结果的模型参数值</p><script type="math/tex; mode=display">\begin{align}& \Rightarrow 给定观测值\{x_i\}，求\mu和\sigma，是的似然函数最大\\& \Rightarrow p({\{x_i\} }|\mu,\sigma)=\prod_1^Np({x_i}|\mu,\sigma)\\& \Rightarrow \hat{\mu},\hat{\sigma}=arg\: max\prod_1^Np({x_i}|\mu,\sigma)\\求得：&\hat{\mu}=\frac{1}{N}\sum_{i=1}^Nx_i\\&\hat{\sigma}=\frac{1}{N}\sum_{i=1}^N(x_i-\hat{\mu})^2\end{align}</script><p>​            即求得一元高斯分布</p><p>​        2）多元高斯分布</p><p>​                标准的二元高斯分布：</p><script type="math/tex; mode=display">\begin{align}& D=2\\&x=\begin{bmatrix}x & y\end{bmatrix}^T\\&\mu=\begin{bmatrix}0 & 0\end{bmatrix}^T\\&\Sigma=\begin{bmatrix}1 & 0\\ 0 & 1\end{bmatrix}\end{align}</script><p>​                三元高斯分布：</p><script type="math/tex; mode=display">\begin{align}& D = 3 \\& x = [x_R\;x_G\;x_B]\\& \mu = [\mu_R\;\mu_G\;\mu_B]\\&\Sigma=\begin{bmatrix}\sigma_{x_R}^2 & \sigma_{x_R}\sigma_{x_G} & \sigma_{x_R}\sigma_{x_B}\\ \sigma_{x_R}\sigma_{x_G} & \sigma_{x_G}^2 & \sigma_{x_G}\sigma_{x_B}\\ \sigma_{x_R}\sigma_{x_B} & \sigma_{x_G}\sigma_{x_B} & \sigma_{x_B}^2\end{bmatrix}\end{align}</script><h2 id="3-STL标准模板库"><span class="heading-link">[3] STL标准模板库</span></h2><h2 id="4"><span class="heading-link">[4]</span></h2><h2 id="5-C-11"><span class="heading-link">[5] C++11</span></h2><p>关键字和新的for循环语法，新的STL容器，多线程，智能指针内存管理</p><h2 id="6"><span class="heading-link">[6]</span></h2><h2 id="7"><span class="heading-link">[7]</span></h2><blockquote><p>在 Linux 或 Unix 操作系统中，所有的文件和目录都被组织成以一个根节点开始的倒置的树状结构。</p></blockquote><p>​    /bin命令，/boot启动时的核心文件，/etc系统配置文件，/home用户主目录，/usr应用程序和文件 类似于program files</p><p>​    当前目录：.   上级目录：..</p><h2 id="8-安装方式"><span class="heading-link">[8] 安装方式</span></h2><p>​    1）deb包安装：下载deb格式的软件后，sudo dpkg -i [name].deb</p><p>​    2） tar.gz软件编译安装：解压后，./configure，make，sudo make install</p><p>​    3） apt-get 安装：sudo apt-get install [software-name]</p><p>​    4）脚本安装：例如./clion.sh</p><h2 id="9"><span class="heading-link">[9]</span></h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-Ax-b&quot;&gt;&lt;span class=&quot;heading-link&quot;&gt;[1] Ax = b&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;1）矩阵相乘关系&lt;/p&gt;
&lt;script type=&quot;math/tex; mode=display&quot;&gt;
m*n·n*s = m*s&lt;/scrip
      
    
    </summary>
    
      <category term="SLAM" scheme="https://acptek.github.io/categories/SLAM/"/>
    
    
      <category term="SLAM" scheme="https://acptek.github.io/tags/SLAM/"/>
    
      <category term="Math" scheme="https://acptek.github.io/tags/Math/"/>
    
  </entry>
  
  <entry>
    <title>Git常用命令总结</title>
    <link href="https://acptek.github.io/2019/09/01/Git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E6%80%BB%E7%BB%93/"/>
    <id>https://acptek.github.io/2019/09/01/Git常用命令总结/</id>
    <published>2019-09-01T14:37:28.000Z</published>
    <updated>2019-09-08T03:24:39.318Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Commit"><span class="heading-link">Commit</span></h2><p>创建一个提交：<br><figure class="highlight plain"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit</span><br></pre></td></tr></table></div></figure></p><h2 id="Branch"><span class="heading-link">Branch</span></h2><blockquote><p>Git分支是指向某个提交记录，不会造成内存上的开销，按逻辑分解工作到不同的分支，星号（ * ）标识表示当前所在分支 </p></blockquote><ol><li><p>创建分支：</p><figure class="highlight plain"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch newbranch</span><br></pre></td></tr></table></div></figure></li><li><p>切换分支：（从master分支切换到newbranch分支）</p><figure class="highlight plain"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout newbranch</span><br></pre></td></tr></table></div></figure></li><li><p>简洁方式：</p><p>创建一个分支并且切换到新的分支上</p><figure class="highlight plain"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b &lt;branch_name&gt;</span><br></pre></td></tr></table></div></figure></li><li><figure class="highlight plain"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cpp git branch xx master^^2^</span><br></pre></td></tr></table></div></figure></li></ol><h2 id="Merge"><span class="heading-link">Merge</span></h2><blockquote><p>将两个或两个以上的开发历史合并到一起</p></blockquote><ol><li><figure class="highlight plain"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull = git fetch + git merge</span><br></pre></td></tr></table></div></figure></li><li><p>Merge模拟：</p><figure class="highlight plain"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b newbranch</span><br><span class="line">git commit -m &quot;newbranch提交&quot;</span><br><span class="line">git checkout master</span><br><span class="line">git commit -m “master提交”</span><br><span class="line">git merge newbranch //将newbranch合并到master</span><br></pre></td></tr></table></div></figure></li></ol><h2 id="Rebase"><span class="heading-link">Rebase</span></h2><blockquote><p>1 合并多个commit为一个完整commit</p><p>2 将某一段commit粘贴到另一个分支上</p></blockquote><ol><li>将newbranch分支的工作移到master分支上，实现并行开发：<figure class="highlight plain"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b newbranch</span><br><span class="line">git commit -m &quot;newbranch更新&quot;</span><br><span class="line">git checkout master</span><br><span class="line">git commit -m &quot;master更新&quot;</span><br><span class="line">git checkout newbranch</span><br><span class="line">git rebase newbranch</span><br></pre></td></tr></table></div></figure></li></ol><h2 id="HEAD"><span class="heading-link">HEAD</span></h2><blockquote><p>HEAD 是一个对当前检出记录的符号引用 —— 也就是指向你正在其基础上进行工作的提交记录，常情况下指向分支名</p></blockquote><p>C0 → C1（ master* ）：HEAD → master → C1</p><p>然后执行<br><figure class="highlight plain"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout C1</span><br></pre></td></tr></table></div></figure>，变成</p><p>HEAD → C1</p><ol><li>分离出HEAD并使其指向一个提交记录<figure class="highlight plain"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout &lt;hash-value&gt;</span><br></pre></td></tr></table></div></figure></li></ol><h2 id="相对引用（-）"><span class="heading-link">相对引用（ ^/~ ）</span></h2><blockquote><ul><li>使用 <code>^</code> 向上移动 1 个提交记录</li><li>使用 <code>~&lt;num&gt;</code> 向上移动多个提交记录，如 <code>~3</code></li></ul></blockquote><figure class="highlight plain"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout xxx^</span><br></pre></td></tr></table></div></figure><figure class="highlight plain"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cpp git checkout xxx~3</span><br></pre></td></tr></table></div></figure><ol><li>强制修改分支位置：</li></ol><figure class="highlight plain"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -f master HEAD^ </span><br></pre></td></tr></table></div></figure><p>   将master分支强制移动到HEAD的上一个分支</p><h2 id="撤销变更"><span class="heading-link">撤销变更</span></h2><ol><li><p>git reset</p><blockquote><p><code>git reset</code> 向上移动分支，原来指向的提交记录就跟从来没有提交过一样</p><p>对共享远程分支无效</p></blockquote></li></ol><figure class="highlight plain"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset HEAD~1</span><br></pre></td></tr></table></div></figure><ol><li><p>git revert</p><blockquote><p>撤销更改并支持分享给别人</p><figure class="highlight plain"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git revert HEAD</span><br></pre></td></tr></table></div></figure></blockquote><p>创建一个新的提交，该提交与HEAD的前一条提交相同</p></li></ol><h2 id="自由修改提交树"><span class="heading-link">自由修改提交树</span></h2><ol><li><p>git Cherry-pick （知道提交的哈希值</p><blockquote><p>git cherry-pick &lt;提交号&gt;…</p><p>将一些提交复制到当前所在的位置（<code>HEAD</code>）下面</p></blockquote><figure class="highlight plain"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git cherry-pick C3 C4 C5</span><br><span class="line">   </span><br></pre></td></tr></table></div></figure></li><li><p>交互式rebase</p><p>参数 —interactive ，简写为  -i </p><figure class="highlight plain"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git rebase -i HEAD~3</span><br><span class="line">   </span><br></pre></td></tr></table></div></figure></li></ol><blockquote><p>调整提交记录的顺序</p><p>删除提交</p><p>合并提交</p></blockquote><h2 id="标签"><span class="heading-link">标签</span></h2><blockquote><p>可以永久将某个特定的提交命名为里程碑，不会随着新的提交而移动，它表示了某个特定位置</p></blockquote><figure class="highlight plain"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git tag version1 C1</span><br></pre></td></tr></table></div></figure><h2 id="锚点"><span class="heading-link">锚点</span></h2><blockquote><p>描述最近的标签，<br><figure class="highlight plain"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git describe &lt;ref&gt;</span><br></pre></td></tr></table></div></figure>，得到例ref最近的标签、二者间相差多少个提交记录</p></blockquote><h2 id="远程仓库"><span class="heading-link">远程仓库</span></h2><h3 id="Clone"><span class="heading-link">Clone</span></h3><blockquote><p>在本地创建一个远程仓库的拷贝</p></blockquote><h3 id="远程分支"><span class="heading-link">远程分支</span></h3><blockquote><p>反映了远程仓库的状态，在检出时自动进入分离 HEAD 状态。</p></blockquote><p>远程分支命名规范： [remote name] / [branch name] </p><p>例如：origin/master，分支为 master ，远程仓库为 origin</p><p>在使用 git clone 时，git将远程仓库命名为 origin（默认命名）</p><figure class="highlight plain"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout origin/master（head分离）</span><br></pre></td></tr></table></div></figure><h3 id="Fetch"><span class="heading-link">Fetch</span></h3><blockquote><p>从远程仓库下载本地仓库缺失的提交记录</p><p>更新远程分支指针</p><p>（实际上将本地仓库中的远程分支更新成了远程仓库相应分支最新的状态）</p><p>（为下载操作，不改变本地仓库状态）</p></blockquote><h3 id="Pull"><span class="heading-link">Pull</span></h3><blockquote><p>从远程仓库获取更新并合并到本地的分支当中</p></blockquote><h3 id="Push"><span class="heading-link">Push</span></h3><p><code>git push</code>将变更上传到远程仓库，并在其上合并提交记录</p><h3 id="偏离的提交历史"><span class="heading-link">偏离的提交历史</span></h3><p>对于提交已更新的旧版本的更改，需要先合并新版本在提交更改</p><p><code>git commit</code>//对于旧版本的更改</p><p><code>git pull --rebase</code>//合并新版本并提交更改</p><p><code>git push</code>//提交到远程分支</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Commit&quot;&gt;&lt;span class=&quot;heading-link&quot;&gt;Commit&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;创建一个提交：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;div class=&quot;table-container&quot;&gt;&lt;tab
      
    
    </summary>
    
    
      <category term="Git" scheme="https://acptek.github.io/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>19-07-08</title>
    <link href="https://acptek.github.io/2019/07/10/19-07-08/"/>
    <id>https://acptek.github.io/2019/07/10/19-07-08/</id>
    <published>2019-07-10T07:25:28.000Z</published>
    <updated>2019-07-20T07:17:33.827Z</updated>
    
    <content type="html"><![CDATA[<div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Enter password to read." />    <label for="pass">Enter password to read.</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">U2FsdGVkX1+3G5qob5k8DB4Uwn1qf1SSMuh9fWA64eCD1ourK7pn5kMUthNwd+gUFfmp+b1qvo1BXwBEAJ9uxQ==</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      Enter password to read.
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>测试</title>
    <link href="https://acptek.github.io/2019/06/23/%E6%B5%8B%E8%AF%95/"/>
    <id>https://acptek.github.io/2019/06/23/测试/</id>
    <published>2019-06-23T08:16:08.000Z</published>
    <updated>2019-09-08T03:21:43.603Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Hello-World"><span class="heading-link">Hello World</span></h1><h2 id="Test"><span class="heading-link">Test</span></h2><h3 id="Welcome"><span class="heading-link">Welcome</span></h3><h4 id="测试"><span class="heading-link">测试</span></h4><blockquote><p>quote test …</p><footer><strong>Test</strong><cite>test</cite></footer></blockquote><blockquote><p>Every interaction is both precious and an opportunity to delight.</p><footer><strong>Seth Godin</strong><cite><span class="external-link"><a href="http://sethgodin.typepad.com/seths_blog/2009/07/welcome-to-island-marketing.html" target="_blank" rel="noopener">Welcome</a><i class="fa fa-external-link"></i></span></cite></footer></blockquote><figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alert(<span class="string">'Hello World!'</span>);</span><br></pre></td></tr></table></div></figure><iframe src="https://www.bing.com" width="100%" height="100" frameborder="0" allowfullscreen></iframe>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Hello-World&quot;&gt;&lt;span class=&quot;heading-link&quot;&gt;Hello World&lt;/span&gt;&lt;/h1&gt;&lt;h2 id=&quot;Test&quot;&gt;&lt;span class=&quot;heading-link&quot;&gt;Test&lt;/span&gt;&lt;/h2&gt;&lt;h3 id=&quot;Welc
      
    
    </summary>
    
    
      <category term="test" scheme="https://acptek.github.io/tags/test/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://acptek.github.io/2019/06/22/hello-world/"/>
    <id>https://acptek.github.io/2019/06/22/hello-world/</id>
    <published>2019-06-22T14:37:28.000Z</published>
    <updated>2019-09-16T04:31:36.441Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <span class="external-link"><a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a><i class="fa fa-external-link"></i></span>! This is your very first post. Check <span class="external-link"><a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a><i class="fa fa-external-link"></i></span> for more info. If you get any problems when using Hexo, you can find the answer in <span class="external-link"><a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a><i class="fa fa-external-link"></i></span> or you can ask me on <span class="external-link"><a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a><i class="fa fa-external-link"></i></span>.</p><h2 id="Quick-Start"><span class="heading-link">Quick Start</span></h2><h3 id="Create-a-new-post"><span class="heading-link">Create a new post</span></h3><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></div></figure><p>More info: <span class="external-link"><a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a><i class="fa fa-external-link"></i></span></p><h3 id="Run-server"><span class="heading-link">Run server</span></h3><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></div></figure><p>More info: <span class="external-link"><a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a><i class="fa fa-external-link"></i></span></p><h3 id="Generate-static-files"><span class="heading-link">Generate static files</span></h3><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></div></figure><p>More info: <span class="external-link"><a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a><i class="fa fa-external-link"></i></span></p><h3 id="Deploy-to-remote-sites"><span class="heading-link">Deploy to remote sites</span></h3><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></div></figure><p>More info: <span class="external-link"><a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a><i class="fa fa-external-link"></i></span></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;span class=&quot;external-link&quot;&gt;&lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;&lt;i class=&quot;fa fa-external-link&quot;&gt;&lt;
      
    
    </summary>
    
    
  </entry>
  
</feed>
